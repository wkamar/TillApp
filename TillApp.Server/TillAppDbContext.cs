//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 1/15/2024 11:58:02 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using TillApp.Shared.Models;

namespace TillApp.Server
{

    public partial class TillAppDbContext : DbContext
    {

        public TillAppDbContext() :
            base()
        {
            OnCreated();
        }

        public TillAppDbContext(DbContextOptions<TillAppDbContext> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                !optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension)))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("TillappdbConnectionString"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        public static string GetConnectionString(string connectionStringName)
        {
            IConfigurationRoot configuration = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();
            return configuration.GetConnectionString("TillappdbConnectionString");
        }


        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<OrderItem> OrderItems
        {
            get;
            set;
        }

        public virtual DbSet<Order> Orders
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            OrderItemMapping(modelBuilder);
            CustomizeOrderItemMapping(modelBuilder);

            OrderMapping(modelBuilder);
            CustomizeOrderMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region OrderItem Mapping

        private void OrderItemMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<OrderItem>().ToTable(@"OrderItems", @"dbo");
            modelBuilder.Entity<OrderItem>().Property(x => x.OrderItemID).HasColumnName(@"OrderItemID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<OrderItem>().Property<int>(@"OrderID").HasColumnName(@"OrderID").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<OrderItem>().Property(x => x.ItemName).HasColumnName(@"ItemName").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<OrderItem>().Property(x => x.Price).HasColumnName(@"Price").HasColumnType(@"money").ValueGeneratedNever().HasPrecision(19, 4);
            modelBuilder.Entity<OrderItem>().HasKey(@"OrderItemID");
        }

        partial void CustomizeOrderItemMapping(ModelBuilder modelBuilder);

        #endregion

        #region Order Mapping

        private void OrderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Order>().ToTable(@"Orders", @"dbo");
            modelBuilder.Entity<Order>().Property(x => x.OrderID).HasColumnName(@"OrderID").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<Order>().Property(x => x.OrderName).HasColumnName(@"OrderName").HasColumnType(@"nvarchar(100)").ValueGeneratedNever().HasMaxLength(100);
            modelBuilder.Entity<Order>().Property(x => x.Amount).HasColumnName(@"Amount").HasColumnType(@"money").ValueGeneratedNever().HasPrecision(19, 4);
            modelBuilder.Entity<Order>().Property(x => x.IsPaid).HasColumnName(@"IsPaid").HasColumnType(@"bit").ValueGeneratedNever();
            modelBuilder.Entity<Order>().HasKey(@"OrderID");
        }

        partial void CustomizeOrderMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<OrderItem>().HasOne(x => x.Order).WithMany(op => op.OrderItems).HasForeignKey(@"OrderID").IsRequired(true);

            modelBuilder.Entity<Order>().HasMany(x => x.OrderItems).WithOne(op => op.Order).HasForeignKey(@"OrderID").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == EntityState.Added || e.State == EntityState.Modified || e.State == EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
